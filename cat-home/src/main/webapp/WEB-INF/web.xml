<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">
	<filter>
		<filter-name>cat-filter</filter-name>
		<filter-class>com.dianping.cat.servlet.CatFilter</filter-class>
	</filter>
	<filter>
		<filter-name>domain-filter</filter-name>
		<filter-class>com.dianping.cat.report.view.DomainFilter</filter-class>
	</filter>
	<servlet>
		<servlet-name>cat-servlet</servlet-name>
		<servlet-class>com.dianping.cat.servlet.CatServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet>
		<servlet-name>mvc-servlet</servlet-name>
		<servlet-class>org.unidal.web.MVC</servlet-class>
		<init-param>
			<param-name>cat-client-xml</param-name>
			<param-value>client.xml</param-value>
		</init-param>
		<init-param>
			<param-name>init-modules</param-name>
			<param-value>false</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<filter-mapping>
		<filter-name>cat-filter</filter-name>
		<url-pattern>/r/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>
	<filter-mapping>
		<filter-name>domain-filter</filter-name>
		<url-pattern>/r/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>
	<filter-mapping>
		<filter-name>cat-filter</filter-name>
		<url-pattern>/s/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>
	<filter-mapping>
		<filter-name>cat-filter</filter-name>
		<url-pattern>/jsp/*</url-pattern>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	<servlet-mapping>
		<servlet-name>mvc-servlet</servlet-name>
		<url-pattern>/r/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>mvc-servlet</servlet-name>
		<url-pattern>/s/*</url-pattern>
	</servlet-mapping>
	<jsp-config>
		<taglib>
			<taglib-uri>/WEB-INF/app.tld</taglib-uri>
			<taglib-location>/WEB-INF/app.tld</taglib-location>
		</taglib>
	</jsp-config>
    <!-- ========================单点登录开始 ======================== -->
    <listener>
        <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
    </listener>

    <!--该过滤器用于实现单点登出功能，可选配置。 -->
    <filter>
        <filter-name>CASSingle Sign OutFilter</filter-name>
        <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CASSingle Sign OutFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 该过滤器负责用户的认证工作，必须 -->
    <filter>
        <filter-name>CASFilter</filter-name>
        <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>
        <init-param>
            <param-name>casServerLoginUrl</param-name>
            <param-value>http://bvhome.imwork.net:18080/cas/login</param-value>
        </init-param>
        <init-param>
            <!--此地址是用于给cas服务器进行回调的域名和端口，注意，如果在这个回调地址后面配置了具体的路径和参数，而非简单的域名端口，比如:-->
            <!--http://casTest01.com:8081/aaa/bb.jsp?AA=123-->
            <!--1.参数AA=123在访问任何客户端地址时都会cas服务器被带回来-->
            <!--2.具体路径：/aaa/bb.jsp   只有在访问客户端简单域名加端口时，cas服务器才会将完整路径返回：http://casTest01.com:8081/aaa/bb-->
            <param-name>serverName</param-name>
            <param-value>http://bvhome.imwork.net:18080</param-value>

            <!--此地址是用于给cas服务器进行绝对回调的地址，只要是被cas拦截，只回调地址必然是service所对应参数-->
            <!--<param-name>service</param-name>-->
            <!--<param-value>http://casTest01.com:8081/loginSuccess.do</param-value>-->
        </init-param>
        <init-param>
            <param-name>ignorePattern</param-name>
            <param-value>op=json|op=xml</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CASFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--该过滤器负责对Ticket的校验工作，必须启用它 -->
    <filter>
        <filter-name>CASValidationFilter</filter-name>
        <filter-class>
            org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter
        </filter-class>
        <init-param>
            <param-name>casServerUrlPrefix</param-name>
            <param-value>http://bvhome.imwork.net:18080/cas</param-value>
        </init-param>
        <init-param>
            <param-name>serverName</param-name>
            <param-value>http://bvhome.imwork.net:18080</param-value>
        </init-param>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CASValidationFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->
    <filter>
        <filter-name>CASHttpServletRequest WrapperFilter</filter-name>
        <filter-class>
            org.jasig.cas.client.util.HttpServletRequestWrapperFilter
        </filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CASHttpServletRequest WrapperFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。 比如AssertionHolder.getAssertion().getPrincipal().getName()。 -->
    <filter>
        <filter-name>CASAssertion Thread LocalFilter</filter-name>
        <filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CASAssertion Thread LocalFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- ========================单点登录结束 ======================== -->
</web-app>

